1
00:00:01,580 --> 00:00:11,979
Another property that is very important when it
comes to CSS grid is 'justify-items' and justify

2
00:00:11,980 --> 00:00:16,249
items and the default is right now.

3
00:00:16,250 --> 00:00:17,680
Stretch.

4
00:00:17,920 --> 00:00:27,579
So that if I refresh this nothing's going to change
but if I do start and refresh it aligns the contents

5
00:00:27,580 --> 00:00:31,800
in a grid item along what
we call the row axes.

6
00:00:31,840 --> 00:00:42,110
So the row axes is each row if I do end and I
refresh we see that there now towards the end.

7
00:00:43,040 --> 00:00:48,880
But a better way to visualize this is
to actually use our developer tools.

8
00:00:49,220 --> 00:00:59,969
So if I go to view&gt;developer&gt;developer tools and we
select our grid you see that by clicking on this

9
00:00:59,970 --> 00:01:05,720
pointing icon and hovering over it in Google
Chrome we actually see our grid system.

10
00:01:06,030 --> 00:01:09,630
And if I scroll you see that
it actually stays in place.

11
00:01:10,780 --> 00:01:17,360
But you see that we now have our
items at the end of our grid system.

12
00:01:17,710 --> 00:01:24,770
Our last item which is '2fr' right
over here is justified to the end.

13
00:01:25,120 --> 00:01:33,839
Our second column is justified to the end and we see
a bit of a gap here and that is because remember

14
00:01:33,840 --> 00:01:43,709
we have '1fr' and then the first item because it's
auto and the size is according to its content doesn't

15
00:01:43,710 --> 00:01:52,390
really move whether we have end or start here it's
already within the maxed space of the grid system.

16
00:01:52,650 --> 00:01:55,910
And just like we have
the axes around the row.

17
00:01:55,950 --> 00:02:07,430
If I change this to 'align-items' and I save and
refresh this is hard to see so let's just do five or

18
00:02:07,520 --> 00:02:11,150
300px and refresh here.

19
00:02:11,400 --> 00:02:21,870
We see that align-items is the exact opposite where
it's around a column axes and we can use start.

20
00:02:22,020 --> 00:02:29,709
end here to move those grid boxes around but most
of the time we want this field and we don't want to

21
00:02:29,710 --> 00:02:34,790
move items around so I don't really
like using those two properties.

22
00:02:34,960 --> 00:02:36,170
So let's fix that to

23
00:02:36,200 --> 00:02:39,449
'1fr' if I refresh.

24
00:02:39,450 --> 00:02:41,630
All right we have things back to normal.

25
00:02:41,700 --> 00:02:43,960
We're going to close this.

26
00:02:44,090 --> 00:02:50,869
Now the last thing I want to show you inside of this
container is my preferred method of actually creating

27
00:02:50,870 --> 00:02:53,580
a grid layout in any website that I built.

28
00:02:54,170 --> 00:03:02,419
And what I usually like to do is something new that
we haven't seen before I usually do repeat and define

29
00:03:02,420 --> 00:03:03,900
here how many rows I want.

30
00:03:03,960 --> 00:03:07,380
Let's say I want '3, 1fr'.

31
00:03:07,400 --> 00:03:10,590
So I want everything to have the same size.

32
00:03:11,270 --> 00:03:13,720
But there's a problem here right.

33
00:03:14,150 --> 00:03:17,410
Because right now this is stretching.

34
00:03:17,660 --> 00:03:27,970
But as soon as we make it too small or too big it's
just it's not extremely responsive or it's not 100

35
00:03:27,980 --> 00:03:29,200
percent responsive.

36
00:03:29,240 --> 00:03:37,490
So instead I like using 'auto-fill'. And
auto-fill, just to show you what it does.

37
00:03:37,510 --> 00:03:40,480
If I do something like 300px and I refresh

38
00:03:43,440 --> 00:03:52,490
and now I change the sizing you'll see that our
grid system or the column system adjusts auto fills

39
00:03:52,890 --> 00:03:59,550
according to the size of our
viewport which is really really nice.

40
00:03:59,760 --> 00:04:03,260
But right now I just said 300px.

41
00:04:03,300 --> 00:04:05,950
So again it's not super super responsive.

42
00:04:06,980 --> 00:04:12,620
So instead we can use something
else called the 'minmax()'.

43
00:04:12,850 --> 00:04:14,910
And I know this can look confusing.

44
00:04:15,740 --> 00:04:21,379
But if you remember this pattern this is the most
common pattern I would say to use when it comes to

45
00:04:21,380 --> 00:04:22,430
CSS grid.

46
00:04:22,640 --> 00:04:26,510
So once you get used to this you can just
copy and paste it and use it everywhere.

47
00:04:26,730 --> 00:04:33,800
And here we want to do is say well the minimum that
we want the size of our columns to be let's say

48
00:04:33,810 --> 00:04:36,990
I want the minimum to be 200px.

49
00:04:37,010 --> 00:04:40,350
So that's the smallest it's
going to get the max though.

50
00:04:40,370 --> 00:04:43,160
How big do we want these to get.

51
00:04:43,190 --> 00:04:44,720
And this is a common thing.

52
00:04:44,750 --> 00:04:46,360
What do we want as the biggest.

53
00:04:46,460 --> 00:04:55,169
Well just '1fr'. Because as we'll see by doing
this they'll will automatically adjust to the

54
00:04:55,170 --> 00:04:56,639
size of the viewport.

55
00:04:56,640 --> 00:05:00,100
Let me just save and show you what I mean.
If I refresh here.

56
00:05:00,130 --> 00:05:01,570
I see I have three here.

57
00:05:01,640 --> 00:05:11,379
It auto adjusts auto adjusts based on our size but you
also see that the container itself is also adjusting

58
00:05:11,380 --> 00:05:15,340
in size so that if I go
smaller and smaller and smaller

59
00:05:19,010 --> 00:05:26,000
as soon as we hit the to
200px minimum it adjusts.

60
00:05:26,200 --> 00:05:36,450
And because we said '1fr' is the max as soon as the
viewport is really very small and goes below 200px

61
00:05:37,050 --> 00:05:43,690
it's going to just take up one fraction and
in our case it will be the entire screen.

62
00:05:44,610 --> 00:05:54,050
So using this syntax of 'repeat(auto-fill, minmax())'
giving it a minimum we're able to make this completely

63
00:05:54,200 --> 00:05:55,639
responsive.

64
00:05:55,640 --> 00:05:58,630
And as you can see here
it's pretty powerful right.

65
00:06:01,510 --> 00:06:07,300
In just a few lines of code we've made this
grid system that is completely responsive.

66
00:06:07,470 --> 00:06:13,920
All right up to this point we've just focused on
the container but what about the individual items.

67
00:06:14,050 --> 00:06:20,419
What if we want something that's maybe bigger than the
other item and we don't want them all symmetrical

68
00:06:20,420 --> 00:06:21,709
like this.

69
00:06:21,710 --> 00:06:22,710
What will we do?

70
00:06:23,060 --> 00:06:24,550
Let's find out in the next video.

