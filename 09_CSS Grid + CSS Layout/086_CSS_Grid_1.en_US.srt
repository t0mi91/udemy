1
00:00:00,610 --> 00:00:01,849
Wellcome back!

2
00:00:01,850 --> 00:00:07,970
I've given you some starter files so I recommend
watching these videos as you code along as well on

3
00:00:08,060 --> 00:00:09,510
your computer.

4
00:00:09,530 --> 00:00:16,519
We have a few animal cards here that are extremely
cute obviously right now if we look at what we have

5
00:00:16,520 --> 00:00:24,310
we have an HTML page with just simple divs
that contain these little emojis of animals.

6
00:00:24,440 --> 00:00:32,440
And if we go to the style tab I've prefilled a few
things for you just so things look good but all we're

7
00:00:32,450 --> 00:00:39,709
really doing here is we have a few colors and we've
added gradients here just so it looks a little bit

8
00:00:39,710 --> 00:00:48,679
nicer and we have the zones which are these individual
cards with some predefined CSS properties that

9
00:00:48,680 --> 00:00:54,360
we've already seen in the previous videos
just with this base CSS that we have.

10
00:00:54,410 --> 00:00:57,920
We see that we have some
really nice looking cards.

11
00:00:58,190 --> 00:01:02,000
And right now we're using
'display: inline-block'.

12
00:01:02,210 --> 00:01:08,569
If I change this to 'display: block'
and I save this let's refresh.

13
00:01:08,570 --> 00:01:18,429
We see that we now have blocks. That's great! But we
want a little bit more control and perhaps make this

14
00:01:18,430 --> 00:01:21,520
grid a little bit more responsive.

15
00:01:21,610 --> 00:01:27,999
Maybe look a little bit different and just overall
cleaner and when it comes to grids CSS grid is a

16
00:01:28,000 --> 00:01:28,450
way to go.

17
00:01:28,451 --> 00:01:30,080
So how do we use it?

18
00:01:30,520 --> 00:01:38,040
Well the first thing we need to do is
to have a container, around these items.

19
00:01:38,180 --> 00:01:47,030
So I'm just going to create a new div and give it a
class of container. We can name it whatever we want

20
00:01:47,060 --> 00:01:48,560
but containers are nice

21
00:01:49,970 --> 00:01:51,620
descriptive class name.

22
00:01:51,860 --> 00:01:56,190
And we wrap all the
items in this container.

23
00:01:56,210 --> 00:02:01,490
Now the way CSS grid works
is very similar to flexbox.

24
00:02:01,580 --> 00:02:12,770
That is we give it the property of display grid and
all the children will now be able to be part of

25
00:02:12,830 --> 00:02:14,959
this grid system.

26
00:02:14,960 --> 00:02:16,819
So let's see what that looks like.

27
00:02:16,820 --> 00:02:25,530
I'm going to have the container class and
this container class will have display

28
00:02:29,260 --> 00:02:30,020
grid.

29
00:02:30,250 --> 00:02:33,150
So remember with flexbox we can do flex.

30
00:02:33,250 --> 00:02:34,150
It's similar to that.

31
00:02:34,180 --> 00:02:40,299
We do display grid and we no longer want to use the
display block of the zones because we're going to

32
00:02:40,300 --> 00:02:41,529
have a grid system.

33
00:02:41,530 --> 00:02:46,509
So I'm just going to comment this for now we've just
declared this as a grid system but we actually

34
00:02:46,510 --> 00:02:47,930
need to tell it what to do now.

35
00:02:48,160 --> 00:02:59,769
And the most important part of CSS grid is this
property 'grid-template-columns' and most likely you're

36
00:02:59,770 --> 00:03:06,409
going to be using this in all your CSS grid
implementation and where we can use these grid template

37
00:03:06,410 --> 00:03:11,959
columns is to tell our page how
many columns we want to use. In here

38
00:03:11,960 --> 00:03:24,250
if I say something like 300px and 300px I save
and refresh here. Look at that! I have 300px

39
00:03:24,340 --> 00:03:32,229
and then 300px and automatically it because I've
declared it this way with two definitions or two

40
00:03:32,230 --> 00:03:33,729
values.

41
00:03:33,730 --> 00:03:39,420
It assumes that we have two grids,
two grids of 300px and 300px.

42
00:03:39,430 --> 00:03:52,140
So if I make this larger or smaller it's
always going to have 300px two columns.

43
00:03:52,270 --> 00:03:58,419
If I had let's say another
300px here and save refresh.

44
00:03:58,420 --> 00:04:00,050
Look at that!

45
00:04:00,230 --> 00:04:02,420
We now have three columns.

46
00:04:02,480 --> 00:04:04,069
Very very nice.

47
00:04:04,070 --> 00:04:11,400
Another one that you'll see
a lot of is the 'grid-gap'.

48
00:04:11,520 --> 00:04:17,040
And as you might guess from the name it tells
us how much gap we want between the grids.

49
00:04:17,070 --> 00:04:24,640
So if I do 20px here and I refresh
see that we get 20px of gap.

50
00:04:24,750 --> 00:04:26,759
Now this looks really good right now.

51
00:04:26,760 --> 00:04:35,470
But if I change things around this isn't really
responsive because each column is 300px wide.

52
00:04:35,730 --> 00:04:40,180
And as we know users have
different display sizes.

53
00:04:40,410 --> 00:04:45,689
So you get these ugly grids where
you have white space over here.

54
00:04:45,690 --> 00:04:49,110
How will we go about solving this?

55
00:04:49,240 --> 00:04:57,249
And you might be thinking what if we just do percentages
here what if we had four columns and we say

56
00:04:57,250 --> 00:05:04,850
'25% 25% 25% 25%' if I refresh this

57
00:05:09,920 --> 00:05:13,800
I have four columns but there's
still some scrolling involved

58
00:05:16,660 --> 00:05:20,070
although we see that things are
a little bit more responsive now.

59
00:05:23,240 --> 00:05:27,159
Now you can totally do percentages
with 'grid-template-columns'

60
00:05:27,183 --> 00:05:31,283
and it's definitely a lot better
than using something like pixels.

61
00:05:31,360 --> 00:05:35,160
But you now have to start calculating
the fact that you also have a grid gap of

62
00:05:35,180 --> 00:05:42,139
20px and well CSS grid actually gives us a
really really good tool that I recommend you

63
00:05:42,140 --> 00:05:48,010
use 100 percent of the time instead of
percentages or pixels or ems or rems.

64
00:05:48,320 --> 00:05:53,170
And that is called a 'fr' or a fraction.

65
00:05:53,260 --> 00:06:00,939
Now what does the 'fr' syntax mean? If I do
'1fr' here and I save, now let's refresh.

66
00:06:00,940 --> 00:06:08,940
All right I get one item. 'fr' means we have one
fraction in this column so just fill it all up.

67
00:06:10,250 --> 00:06:17,160
If I do '1fr' again and I
refresh I get two columns.

68
00:06:17,400 --> 00:06:21,720
But look at this as I
expand and make it smaller.

69
00:06:22,030 --> 00:06:30,160
It automatically resizes because I'm saying
I want two columns that are '1fr', '1fr'.

70
00:06:32,990 --> 00:06:41,439
Now a better way to explain what this far value means
is if I do something like '2fr' here. What do you

71
00:06:41,440 --> 00:06:42,440
think will happen?

72
00:06:43,050 --> 00:06:48,559
If I save and refresh; this
should give you a better idea.

73
00:06:48,560 --> 00:06:52,190
All we're saying is we want 3 columns.

74
00:06:52,330 --> 00:07:01,999
And in terms of the proportion or the sizes I want
the first two columns to be half the size of the

75
00:07:02,000 --> 00:07:02,730
third column.

76
00:07:02,830 --> 00:07:07,690
Because in terms of fractions,
this is twice as big as the other ones.

77
00:07:09,580 --> 00:07:16,330
As I make this larger and larger it's always
going to say and keep those proportions.

78
00:07:16,360 --> 00:07:19,280
This is going to be twice
as large as the other ones.

79
00:07:22,790 --> 00:07:29,989
So when you using CSS grid this is the best way for
you to maintain this grid system and make sure

80
00:07:29,990 --> 00:07:31,840
that it's responsive.

81
00:07:31,850 --> 00:07:33,110
How cool is that!

82
00:07:33,410 --> 00:07:39,800
Just by writing three properties saying that we want
to use the grid system adding maybe a 'grid-gap'

83
00:07:40,040 --> 00:07:48,549
and 'grid-template-columns' with these 'fr' values
we've made a grid system that is quite responsive but

84
00:07:48,550 --> 00:07:52,260
there are a few more properties
that we can use in CSS grid.

85
00:07:52,270 --> 00:07:54,100
So let's check them out in the next video.

