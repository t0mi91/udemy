1
00:00:00,630 --> 00:00:01,630
Welcome back.

2
00:00:01,800 --> 00:00:05,519
Let's talk about individual items
now when it comes to CSS grid.

3
00:00:05,520 --> 00:00:12,749
Because up until now we've just used this container
and performed operations or changed views to all

4
00:00:12,750 --> 00:00:13,750
the items.

5
00:00:13,830 --> 00:00:18,790
But what if we wanted a bit of a funky
grid system that has a different size.

6
00:00:19,050 --> 00:00:24,119
In that case we can just select
individual items within this container.

7
00:00:24,120 --> 00:00:31,750
If we go back to our HTML page we see that we have
these zones but each zone has different color.

8
00:00:31,860 --> 00:00:38,729
So let's use one of these colors for example green
which we have two of to have some special CSS grid

9
00:00:38,730 --> 00:00:47,140
properties so let's have a green class and I'm just
going to do it up here instead of at the bottom

10
00:00:47,150 --> 00:00:51,150
just so we can keep all the
CSS grid things up the top.

11
00:00:52,000 --> 00:00:59,949
Now for individual items I can say something like
grid-column and say what we wanted to do in terms

12
00:00:59,950 --> 00:01:08,110
of the column grid system and the way this works is we
can give it where it should start and where it should

13
00:01:08,270 --> 00:01:09,270
end.

14
00:01:09,310 --> 00:01:10,310
What does that mean?

15
00:01:10,540 --> 00:01:24,929
Well if I do grid-column-start and I say 1 and then
have grid-column-end and I give it 2 and I refresh

16
00:01:24,930 --> 00:01:27,950
the page nothing changes.

17
00:01:28,120 --> 00:01:35,300
What if I do 'grid-column-end: 3' and I
refresh. Whoa! What just happened here?

18
00:01:36,930 --> 00:01:39,900
In order for us to understand
what these numbers mean.

19
00:01:41,500 --> 00:01:44,320
Let's open up the
developer tools once again.

20
00:01:45,090 --> 00:01:54,599
I'm going to select the items and as we'll see over
here we see that we have a grid zone and this fox

21
00:01:54,600 --> 00:02:00,630
is now taking up two grid spaces.
In the way CSS grid works.

22
00:02:00,650 --> 00:02:06,110
It has a numbering system where
the first line over here is one.

23
00:02:06,320 --> 00:02:14,210
The second line over here is
two and then this is three.

24
00:02:14,290 --> 00:02:16,810
Let's just make this a
little bit bigger to show you

25
00:02:20,030 --> 00:02:21,669
and that's better.

26
00:02:21,670 --> 00:02:26,140
We now have three grid
systems or three grid items.

27
00:02:26,230 --> 00:02:27,650
We have one here.

28
00:02:27,670 --> 00:02:35,409
When the first one begins two where the second one
begins and then 3 where the third one begins.

29
00:02:35,410 --> 00:02:41,439
So what we're saying here is that when it comes to
columns start at one which is right over here and

30
00:02:41,440 --> 00:02:53,520
then end at three so that if I do four here and I
refresh you see that it now covers the entire length.

31
00:02:53,590 --> 00:02:56,610
But as soon as we make
it a little bit bigger.

32
00:02:56,680 --> 00:03:03,280
Well it only is going to cover the
1, 2, 3 up to 4.

33
00:03:03,530 --> 00:03:05,960
And if we make it a little bit smaller

34
00:03:08,770 --> 00:03:16,089
you see that because we said one to four it doesn't
actually make it as responsible as it was before and it

35
00:03:16,090 --> 00:03:22,520
actually extends to make sure that it fills in one
to four and there's a shorthand way of doing this

36
00:03:22,670 --> 00:03:28,159
instead of saying grid-column-start and grid-column-end
we can just say grid-column and then give it the

37
00:03:28,160 --> 00:03:36,480
start number and then slash the end number so that
if I refresh you see that it's the same thing.

38
00:03:36,860 --> 00:03:41,610
Let's make this a little bit bigger and let's
just do three here just to keep it small.

39
00:03:43,450 --> 00:03:43,680
All right.

40
00:03:43,690 --> 00:03:49,980
I'm going to close this and we
see that our grid items now have.

41
00:03:50,040 --> 00:03:51,940
Well this looks pretty good actually.

42
00:03:51,960 --> 00:03:58,200
We have the green classes
that spanned over more grids.

43
00:03:58,240 --> 00:04:03,929
Now a trick here is that sometimes we just
simply don't know what the user is going to see.

44
00:04:03,930 --> 00:04:10,079
And we might want to spend the entire length
without having you know the rabbit come in.

45
00:04:10,080 --> 00:04:17,580
And then the frog and the line coming and we can
actually do at the end here something like '-1'

46
00:04:17,820 --> 00:04:19,940
which means all the way till the end.

47
00:04:20,030 --> 00:04:24,770
If I refresh here, there you go
and make this larger and smaller.

48
00:04:24,810 --> 00:04:30,400
We see that we are saying start at one and
then keep going all the way until the end.

49
00:04:30,620 --> 00:04:36,510
And CSS grid '-1' signifies
the end of the viewport.

50
00:04:38,250 --> 00:04:46,430
So that now we see that we have a nice responsive grid
again that just adjusts according to our viewport.

51
00:04:46,530 --> 00:04:49,340
Very very cool now.

52
00:04:49,370 --> 00:04:55,609
Sometimes we don't really know how many grids we're
going to have on our page and we also might not

53
00:04:55,610 --> 00:05:03,379
necessarily wanted to spend it all across from beginning
to end so useful syntax here is to do something

54
00:05:03,380 --> 00:05:08,560
like 'span 2' which says
span across two grids.

55
00:05:08,750 --> 00:05:13,080
If I refresh here you see that
green is spanning across two grids.

56
00:05:13,190 --> 00:05:18,060
If I do three it's going
to span across three grids.

57
00:05:18,320 --> 00:05:24,100
And as you can imagine the default
is span 1 spanning across one.

58
00:05:24,110 --> 00:05:32,470
But the interesting thing about this is if I do
say span 2 and I refresh as this gets smaller

59
00:05:37,400 --> 00:05:44,750
you see that it's always going to span across to
make sure that it covers whatever the two grids are

60
00:05:45,470 --> 00:05:49,020
which is once again very useful.

61
00:05:49,040 --> 00:05:53,540
Finally we can also do
the same thing with rows.

62
00:05:53,840 --> 00:05:58,160
If we do grid rows or grid row.

63
00:05:58,280 --> 00:06:08,780
I can say, well, we wanted to span to start at
let's say one and end at three. If I refresh here

64
00:06:12,340 --> 00:06:13,780
well what just happened here.

65
00:06:15,770 --> 00:06:17,200
Well let's take a look.

66
00:06:17,210 --> 00:06:20,130
We started at one and ended at three.

67
00:06:20,270 --> 00:06:27,559
And because green is also this unicorn over here it
automatically moved it all the way up because we

68
00:06:27,560 --> 00:06:29,460
wanted to start at one as well.

69
00:06:29,660 --> 00:06:33,260
And remember our grid system now is row.

70
00:06:33,290 --> 00:06:42,949
And if I open the developer tools and select the
grid one starts here then two then three right here

71
00:06:42,950 --> 00:06:43,950
where it ends.

72
00:06:44,210 --> 00:06:50,660
So you have to be careful with the positioning here
that this is going to move whatever it needs to.

73
00:06:50,900 --> 00:06:51,980
All the way up to 1

74
00:06:54,940 --> 00:06:59,630
but we're able to move things
around and adjust the rows as well.

75
00:06:59,650 --> 00:07:05,120
Very very cool! Our grid system is
starting to look really really nice.

76
00:07:05,460 --> 00:07:07,110
Let's do a bit more in the next video.

